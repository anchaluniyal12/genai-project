from dotenv import load_dotenv
import streamlit as st
import os
import sqlite3
import google.generativeai as genai

# Load environment variables
load_dotenv()

# Configure GenAI Key
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Function to load Google Gemini Model and provide queries as response
def get_gemini_response(question, prompt):
    model = genai.GenerativeModel('gemini-pro')
    response = model.generate_content([prompt[0], question])
    return response.text

# Function to retrieve query from the database
def read_sql_query(sql, db):
    conn = sqlite3.connect(db)
    cur = conn.cursor()
    cur.execute(sql)
    rows = cur.fetchall()
    conn.close()
    return rows

# Define your prompt
prompt = [
    """
    You are an expert in converting English questions to SQL queries!
    The SQL database has the following tables - department, locations, employees, salary.
    Here are the columns of each table:
    - department: DEPARTMENT_ID, DEPARTMENT_NAME
    - locations: CITY_ID, CITY_NAME
    - employees: EMP_ID, NAME, DEPARTMENT_ID, CITY_ID
    - salary: EMP_ID, SALARY

    For example:
    - How many employees are there?, the SQL command will be: SELECT COUNT(*) FROM employees;
    - List all employees in the Engineering department, the SQL command will be: 
      SELECT * FROM employees WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID FROM department WHERE DEPARTMENT_NAME='Engineering');
    - Show all employees living in Mumbai, the SQL command will be: 
      SELECT employees.* FROM employees JOIN locations ON employees.CITY_ID = locations.CITY_ID WHERE locations.CITY_NAME='Mumbai';
    The SQL code should not have ``` in the beginning or end and the 'sql' word should not appear in the output.
    """
]

# Streamlit App
st.set_page_config(page_title="Employee Database Query App")
st.header("Gemini App to Retrieve Employee Database Data")

question = st.text_input("Input your question:", key="input")
submit = st.button("Ask the question")
# If submit is clicked
if submit:
    response = get_gemini_response(question, prompt)
    response = response.strip()  # Ensure any whitespace is removed

    # Execute the SQL query generated by Gemini and retrieve results
    try:
        results = read_sql_query(response, "employeedb.db")

        # Display results
        st.subheader("The Response is:")
        for row in results:
            st.text(row)
    
    except sqlite3.Error as e:
        st.error(f"Error executing SQL query: {str(e)}")